{"version":3,"sources":["index.js"],"names":["Chalkboard","state","chalk","notes","updateChalk","event","setState","target","value","updateNotes","preventDefault","newNotes","slice","push","this","map","note","className","onSubmit","type","placeholder","onChange","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"0NAKMA,E,4MAEJC,MAAQ,CACNC,MAAO,GACPC,MAAO,I,EAITC,YAAc,SAAAC,GAIZ,EAAKC,SAAS,CAAEJ,MAAOG,EAAME,OAAOC,S,EAItCC,YAAc,SAAAJ,GAIZA,EAAMK,iBAGN,IAAIC,EAAW,EAAKV,MAAME,MAAMS,QAEhCD,EAASE,KAAK,EAAKZ,MAAMC,OAEzB,EAAKI,SAAS,CACZJ,MAAO,GACPC,MAAOQ,K,4CAGX,WAGE,IAAIR,EAAQW,KAAKb,MAAME,MAAMY,KAAI,SAAAC,GAAI,OAAI,6BAAKA,OAC9C,OACE,sBAAKC,UAAU,MAAf,UAEE,uBAAMC,SAAUJ,KAAKL,YAArB,UACE,uBACEU,KAAK,OACLC,YAAY,YAEZZ,MAAOM,KAAKb,MAAMC,MAElBmB,SAAUP,KAAKV,cAEjB,uBAAOe,KAAK,cAEd,qBAAKF,UAAU,QAAf,SAEE,oBAAIA,UAAU,QAAd,SAAuBH,KAAKb,MAAMC,UAGpC,oBAAIe,UAAU,QAAd,SAAuBd,W,GAvDNmB,aA6DnBC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC3B,EAAD,IAAgBuB,K","file":"static/js/main.70dde054.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\n// https://learn.skillcrush.com/module-8/working-with-user-input/\n\nclass Chalkboard extends Component {\n  // set initial state\n  state = {\n    chalk: \"\",\n    notes: []\n  }\n  // event handler to update the Chalkboard class component's state\n  // as a user types, the text can be seen on the \"Chalkboard\"\n  updateChalk = event => {\n    // interrogate the event to update our state (interrogating an event means retrieving information about an event object)\n    // setState method causes the chalkboard part of the UI to re-render showing the new value\n    // updates the chalk state with whatever text a user typed into the text field\n    this.setState({ chalk: event.target.value });\n  };\n  // this event handler is called when the form is submitted\n  // when a user clicks \"submit\", the note is added to the list of notes\n  updateNotes = event => {\n    /* submit events cause the browser to refresh the page by \n    default. We don't want that, so we prevent it by calling\n    this method on the submit event object: */\n    event.preventDefault();\n    // start by making a copy of the current notes array\n    // ?do we copy the array similar to Python so as not to corrupt the original array?\n    var newNotes = this.state.notes.slice();\n    // add the current chalk message to our copy of the notes array\n    newNotes.push(this.state.chalk);\n    // update state and rerender with an empty input field\n    this.setState({\n      chalk: \"\",\n      notes: newNotes\n    });\n  };\n  render() {\n    // map over notes array, creating an li for each note\n    // this is a callback function declared inline\n    var notes = this.state.notes.map(note => <li>{note}</li>);\n    return (\n      <div className=\"App\">\n        {/* event listener passes to the updateNotes event handler the JS object when the user submits teh form */}\n        <form onSubmit={this.updateNotes}>\n          <input\n            type=\"text\"\n            placeholder=\"type here\"\n            // value is for the state of chalk in the Clalkboard class component\n            value={this.state.chalk}\n            // event listener passes to the updateChalk event handler the JS object when the user inputs \n            onChange={this.updateChalk}\n          />\n          <input type=\"submit\" />\n        </form>\n        <div className=\"board\">\n          {/* rendering the current state of chalk in the Clalkboard class component */}\n          <h1 className=\"chalk\">{this.state.chalk}</h1>\n        </div>\n        {/* rendering the notes that were mapped over */}\n        <ul className=\"notes\">{notes}</ul>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Chalkboard />, rootElement);\n"],"sourceRoot":""}